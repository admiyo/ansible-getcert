#!/bin/env python

# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

#!/usr/bin/python

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = '''
---
module: getcert

short_description: X509 certificate tracking using getcert and certmonger

version_added: "2.8"

description:
    - "The certmonger daemon monitors certificates for impending
       expiration, and can optionally refresh soon-to-be-expired certificates
with the help of a CA. If told to, it can drive the entire enrollment
process from key generation through enrollment and refresh.


It can work with either flat files, like those used by OpenSSL, or
with NSS databases.

The certmonger command-line too, getcert is a very generic tool that can manage the certificates you are tracking."

options:


        #NSS options
        location:
           description:
               - directory location for the NSS database
                 NSS only
           required: False

        nickname:
           description:
               - Nickname for the certificate in the NSS database.
                 NSS Only
           required: False

        token:
          description:
               - NSS Only

            required: False

        #OpenSSL options
        certificate_file:
          description:
               - OpenSSL Only
          required: False

        key_file:
          description:
               - OpenSSL Only
          required: False

        ca:
           description:
               - Which CA the Certmonger instance should use to request the
                 certificate
           required: True



        remove:
            description:
                - used to remove/stop tracking a certificate
                default: False
            required:False


        pin_file:
            description:
                - used to encrypt/decrypt the NSS or OpenSSL key store
            required:False

        kerberos_principal:
            description:
                - Add an extensionRequest to the signing request
                  for a subjectAltName,
                  with the specified Kerberos principal name as its value,
            required:False

        subject_name:
            description:
                - Set the subject name to include in the signing request.
                -  The default used is CN=hostname, where hostname is the
                   local hostname.
            required:False

        bits:
            description:
                -  In case a new key pair needs to be generated
                   this option specifies the size of the key.
                   default: 2048
            required:False




author:
    - Adam Young (@ayoung)
'''

EXAMPLES = '''
# Pass in a message
- name: Test with a message
  my_new_test_module:
    name: hello world

# pass in a message and have changed true
- name: Test with a message and changed output
  my_new_test_module:
    name: hello world
    new: true

# fail the module
- name: Test failure of the module
  my_new_test_module:
    name: fail me
'''

RETURN = '''
original_message:
    description: The original name param that was passed in
    type: str
message:
    description: The output message that the sample module generates
'''
from subprocess import PIPE, STDOUT
from ansible.module_utils.basic import AnsibleModule
import exceptions
import random
import subprocess
import uuid
import os
import grp


STORE_NSS=' -d %(location)s -n %(nickname)s '
STORE_OPENSSL=' -f %(certificate_file)s -k %(key_file)s '
SEARCH_OPENSSL=' -f %(certificate_file)s '

FILE_MODE=0640
DIR_MODE=0750


def _check_files(module):
    for key in ['certificate_file', 'key_file']:
        file_name = module.params[key]
        if not os.path.isfile(file_name):
            return False
    return True


def _make_files(module):
    _make_pin_file(module)
    for key in ['certificate_file', 'key_file']:
        file_name = module.params[key]
        file_dir = os.path.dirname(file_name)
        try:
            cmd = 'semanage fcontext -a -t cert_t %s(/.*)' % file_dir
            p = subprocess.call(cmd, shell=True, stdout=None, stderr=None,)
        except ValueError:
            pass
        cmd = 'restorecon -FvvR %s' % file_dir
        p = subprocess.call(cmd, shell=True, stdout=None, stderr=None)



def _check_nss_database(module):
    cmd = '/bin/certutil -f %(pin_file)s  -L -d %(location)s' % module.params
    try:
        subprocess.check_call(cmd, shell=True, stdout=None, stderr=None,)
        return True
    except subprocess.CalledProcessError:
        return False
    except exceptions.OSError:
        return False

def _make_pin_file(module):
    pin_file = module.params['pin_file']
    if pin_file is None:
        return
    pin =  uuid.uuid4().hex
    pindir = os.path.dirname(pin_file)
    try:
        os.makedirs(pindir)
    except exceptions.OSError, ose:
        if ose.errno == 17:
            pass
        else:
            raise
    with open(pin_file, 'w') as f:
        f.write(pin)

    os.chmod(pin_file, FILE_MODE)


def _make_nss_database(module):

    location = module.params['location']
    db_files = ['cert8.db', 'key3.db', 'secmod.db']
    _make_pin_file(module)

    try:
        os.makedirs(location, DIR_MODE)
    except exceptions.OSError, ose:
        if ose.errno == 17:
            pass
        else:
            raise
    os.chmod(location, DIR_MODE)
    cmd = '/bin/certutil -f %(pin_file)s  -N -d %(location)s' % module.params
    p = subprocess.call(cmd, shell=True, stdout=None, stderr=None,)
    chgrp("%s" % location)

    os.chmod(location, DIR_MODE)
    for f in db_files:
        chgrp("%s/%s" % (location, f))
        os.chmod("%s/%s" % (location, f), FILE_MODE)

    try:
        cmd = ('semanage fcontext -a -t cert_t "%(location)s(/.*)?"'
               % module.params)
        p = subprocess.call(cmd, shell=True, stdout=None, stderr=None,)
    except ValueError:
        pass

    cmd = 'restorecon -FvvR %(location)s' % module.params
    p = subprocess.call(cmd, shell=True, stdout=None, stderr=None)

def _check_cert( db_type_nss, module, remove_if_mismatched = False):

    cmd = '/bin/getcert list '
    if  db_type_nss:
        cmd = cmd + STORE_NSS
    else:
        cmd = cmd + SEARCH_OPENSSL

    cmd = cmd % module.params
    p = subprocess.Popen(cmd, shell=True,
                         stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)

    # If the Nss_Database file does not exist.
    if p.returncode != None:
        return

    found = False
    subject = module.params.get('subject')
    if subject is None:
        subject = module.params.get('kerberos_principal')
    
    for line in p.stdout:
        fields = line.strip().split(':')
        try:
            if fields[0] == 'subject':
                found = True
                cert_subject = fields[1].strip()
                if cert_subject != subject and remove_if_mismatched:
                    cmd = 'getcert stop-tracking '
                    if  db_type_nss:
                        cmd = cmd + STORE_NSS
                        _remove_cert_by_nickname(module)
                    else:
                        cmd = cmd + STORE_OPENSSL
                        os.remove(module.params['certificate_file'])
                    cmd = cmd % module.params
                    subprocess.call(cmd, shell=True, stdout=None, stderr=None)
                    return False
        except:
            print ('err')
         
    return found

def _remove_cert_by_nickname(module):
    cmd = "certutil -D -d %(location)s -n %(nickname)s" % module.params
    subprocess.call( cmd , shell=True, stdout=None, stderr=None)


def run_module():
    # define the available arguments/parameters that a user can pass to
    # the module
    module_args = dict(
        ca=dict(type='str', required=True),
        remove=dict(type='bool', required=False, default=False),

        #NSS options
        location=dict(type='str', required=False),
        nickname=dict(type='str', required=False),
        token=dict(type='str', required=False),

        #OpenSSL options
        certificate_file=dict(type='str', required=False),
        key_file=dict(type='str', required=False),

        pin_file=dict(type='str', required=False),
        kerberos_principal=dict(type='str', required=False),
        subject_name=dict(type='str', required=False),
        bits=dict(type='int', required=False),
    )

    # seed the result dict in the object
    # we primarily care about changed and state
    # change is if this module effectively modified the target
    # state will include any data that you want your module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        original_message='',
        message=''
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    remove = module.params['remove']

    db_type_nss = False
    db_type_openssl = False

    for nss_option in ['location', 'nickname', 'token']:
        if module.params.get(nss_option) != None:
            db_type_nss = True

    for openssl_option in ['certificate_file', 'key_file']:
        if module.params.get(openssl_option) != None:
            db_type_openssl = True

    if db_type_nss and  db_type_openssl:
        module.fail_json(
            msg='Incompatible options for both NSS and OpenSSL specified.',
            **result)
        return

    if remove:
        try:
            cmd = "getcert stop-tracking "
            if db_type_nss:
                cmd = cmd + STORE_NSS
            else:
                cmd = cmd + STORE_OPENSSL
            subprocess.check_call(cmd % module.params, shell=True, stdout=None,
                                  stderr=None,)

            result['message'] ='Cert  no longer tracked'
            module.exit_json(**result)
        except subprocess.CalledProcessError:
            result['message'] ='Cert was not tracked'
        return

    delete_if_conflict = not module.check_mode
    found = _check_cert(db_type_nss, module, delete_if_conflict)


    # if the user is working with this module in only check mode we do not
    # want to make any changes to the environment, just return the current
    # state with no modifications
    if module.check_mode:
        return result

    if found:
        result['message'] ='Subject Cert already tracked'
        module.exit_json(**result)
        return

    if remove:
        result['message'] ='Subject Cert not tracked'
        module.exit_json(**result)
        return

    result['message'] ='Subject Cert  not yet tracked'

    if db_type_nss:
        if not _check_nss_database(module):
            _make_nss_database(module)
    else:
        if not _check_files(module):
            _make_files(module)

    cmd = "getcert request -r -c %(ca)s -g %(bits)d "

    if module.params.get('kerberos_principal') is not None:
        cmd = cmd + ' -K %(kerberos_principal)s '

    if module.params.get('subject_name') is not None:
        cmd = cmd + ' -N %(subject_name)s '

    if db_type_nss:
        if module.params.get('pin_file') is not None:
            cmd = cmd + ' -p %(pin_file)s '        
        cmd = cmd + STORE_NSS
    else:
        cmd = cmd + STORE_OPENSSL
        #possible that there is a certificate in the file but not yet tracked
        try:
            os.remove(module.params['certificate_file'])
        except:
            pass



        
    cmd = cmd % module.params
    result['changed'] = True
    result['command'] = cmd
    subprocess.check_call(cmd, shell=True, stdout=None, stderr=None)

    # ipa-getcert list -d /etc/httpd/nssdb/ -n Server-Cert
    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)

def main():
    run_module()

if __name__ == '__main__':
    main()
